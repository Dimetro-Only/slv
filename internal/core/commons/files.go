package commons

import (
	"os"
	"strconv"
	"strings"

	"gopkg.in/yaml.v3"
)

const slvYamlNotice = "# This file is managed by SLV. DO NOT EDIT THIS FILE MANUALLY.\n"

func WriteToYAML(filePath, notice string, data any) error {
	bytes, err := yaml.Marshal(data)
	if err == nil {
		if notice != "" {
			bytes = append([]byte(notice), bytes...)
		}
		bytes = append([]byte(slvYamlNotice), bytes...)
		err = WriteToFile(filePath, bytes)
	}
	return err
}

func ReadChildFromYAML(filePath, nodePath string, out any) error {
	// Read the file
	data, err := os.ReadFile(filePath)
	if err != nil {
		return err
	}

	// Unmarshal the YAML data into a map
	var objMap map[string]any
	err = yaml.Unmarshal(data, &objMap)
	if err != nil {
		return err
	}

	// Split the node path and traverse the map
	nodes := strings.Split(nodePath, ".")
	for _, node := range nodes {
		if index, err := strconv.Atoi(node); err == nil {
			// If the node is an integer, treat it as an array index
			objArray, _ := objMap[nodes[0]].([]any)
			objMap, _ = objArray[index].(map[string]any)
			nodes = nodes[1:]
		} else {
			objMap, _ = objMap[node].(map[string]any)
		}
	}
	bytes, err := yaml.Marshal(objMap)
	if err != nil {
		return err
	}
	return yaml.Unmarshal(bytes, out)
}

func ReadFromYAML(filePath string, out any) error {
	bytes, err := os.ReadFile(filePath)
	if err == nil {
		err = yaml.Unmarshal(bytes, out)
	}
	return err
}

func WriteToFile(filePath string, content []byte) error {
	return os.WriteFile(filePath, content, 0644)
}
